pipeline {
   environment {
        // 0 - unchanged, 1 - changed
        SRC_CHANGED=1
    }

    agent {
        label 'linux'
    }
    stages {
        stage('Preparation') {
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    ansiColor('xterm') {
                        sh 'yarn'

                        // Repos von Amazon holen
                        // sh 'docker/_ci/run.sh --pull'

                        // Docker f√ºr die Integration-Tests starten
                        // sh 'docker/_ci/run.sh --start'

                        script {
                            // 0 - unchanged, 1 - changed
                            // Script-Logik wird mit ! umgekehrt
                            SRC_CHANGED = ! sh(script: "pub2npm.sh --check", returnStatus: true)
                        }
                    }
                }
            }
        }
        stage('Test') {
            steps {
                ansiColor('xterm') {
                    sh 'yarn run test'
                }
            }
        }
        stage('Build') {
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    ansiColor('xterm') {
                        sh 'yarn run clean'
                        sh 'yarn run deploy'
                        sh "echo \"exit code is : ${SRC_CHANGED}\""
                        // sh 'yarn run deploy:node'
                        // sh 'yarn run deploy:web:prod'
                    }
                }

            }
        }
        
        stage('Publish') {
            // 1 - changed, 0 - unchanged
            when { expression { SRC_CHANGED == 1 }}
            steps {
                ansiColor('xterm') {
                    // check exit code
                    // sh "echo \"exit code is : ${SRC_CHANGED}\""

                    sh 'yarn run pub && git push origin HEAD:master'
                }
            }
        }

    }

    // post {
    //     always {
    //         ansiColor('xterm') {
    //             sh 'docker/_ci/run.sh --stop'
    //         }
    //     }
    // }

}
